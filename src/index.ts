import { app, BrowserWindow, ipcMain, nativeTheme } from 'electron';
import Store from 'electron-store'
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const SPLASH_WINDOW_WEBPACK_ENTRY: string;


let mainWindow: BrowserWindow;
let splashScreen: BrowserWindow;
let onlineStatusWindow: BrowserWindow;
let formWindow: BrowserWindow;
let settingsWindow: BrowserWindow
let store: Store;


// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

function createMainWindow(): void {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    width: 640,
    height: 360,
    show: false,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
    }
  });

  splashScreen = new BrowserWindow({
    width: 300,
    height: 300,
    frame: false,
    alwaysOnTop: true
  });

  splashScreen.loadURL(SPLASH_WINDOW_WEBPACK_ENTRY);
  splashScreen.focus();
  splashScreen.center();

  const onlineStatusWindow = new BrowserWindow({
    width: 400,
    height: 100,
    show: false
  })

  onlineStatusWindow.loadURL(MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY)

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  mainWindow.center();
};

function createFormWindow(): void {
  formWindow = new BrowserWindow({
    width: 720,
    height: 1280
  });

  formWindow.loadURL(MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY);
}

function createSettingsWindow(): void {
  settingsWindow = new BrowserWindow({
    width: 600,
    height: 1500
  });

  settingsWindow.loadURL(MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY);
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  ipcMain.on('open-form', (event, name) => {
    let webContents = event.sender;
    let win = BrowserWindow.fromWebContents(webContents);

  });

  ipcMain.on('open-settings',(event, name) => {
    let webContents = event.sender;
    let win = BrowserWindow.fromWebContents(webContents);
    
  });

  ipcMain.handle('dark-mode:toggle', () => {
    if (nativeTheme.shouldUseDarkColors) {
      nativeTheme.themeSource = 'light'
    } else {
      nativeTheme.themeSource = 'dark'
    }
    return nativeTheme.shouldUseDarkColors
  })

  ipcMain.handle('dark-mode:system', () => {
    nativeTheme.themeSource = 'system'
  })
  
  //createSplash();
  createMainWindow();
  mainWindow.once('ready-to-show', () => {
    setTimeout(() => {
      splashScreen.close()
      mainWindow.show()
      onlineStatusWindow.show()
    }, 2000)
  })
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createMainWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
